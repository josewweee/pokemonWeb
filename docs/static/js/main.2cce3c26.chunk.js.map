{"version":3,"sources":["components/banner/Banner.js","redux/actions/fetchActions.js","components/navBar/NavBar.js","components/pokemon/Pokemon.js","redux/actions/modalActions.js","components/pokemons-list/PokemonList.js","redux/reducers/modalReducer.js","redux/reducers/pokemonsReducer.js","redux/reducers/index.js","redux/store.js","components/pokemon-modal/PokemonModal.js","components/overlay/UseOverlay.js","App.js","index.js","components/banner/banner.module.css"],"names":["Banner","className","styles","banner","title","fetchPokemons","id","dispatch","pokemonReady","fetch","then","rawList","json","pokemon","species","url","res","aditionalData","en_text","flavor_text_entries","find","item","language","name","flavor_text","description","gender_rate","gender","type","payload","catch","error","connect","state","query","queryPokemons","cancelQuery","props","inputRef","React","createRef","useState","cancelButtonClass","setCancelButtonClass","placeholder","ref","onChange","e","target","value","onClick","current","openModal","pokemonData","comparedPokemon","data","src","sprites","front_default","alt","nextPage","pokemons","index","limitIndex","cardAlertDisplay","modalController","isComparing","Container","Row","map","Col","xs","sm","md","lg","key","loadMore","i","hasMore","loader","initialLoad","threshold","initialState","modalVisible","actions","isFetching","filter","includes","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","Graph","dataSet","stats","stat","base_stat","comparedStats","width","height","margin","top","right","bottom","left","dataKey","barSize","fill","ModalHeaderPokemon","comparePokemons","closeModal","ModalHeaderComparing","ModalBodyPokemon","weight","abilities","ability","types","ModalBodyComparing","ModalPokemonFooter","ReactDOM","createPortal","document","getElementById","overlayState","setOverlayState","useEffect","App","NavBar","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.2cce3c26.chunk.js","sourcesContent":["import React from 'react'\nimport styles from './banner.module.css'\n\nconst Banner = () => {\n    return(\n        <div className={styles.banner}>\n            <h1 className={styles.title}>Welcome to Poke App</h1>\n        </div>\n    )\n}\n\nexport default Banner","export const FETCH_POSTS_REQUEST = 'FETCH_POST_REQUEST'\nexport const FETCH_POSTS_SUCCESS = 'FETCH_POST_SUCCESS'\nexport const FETCH_POSTS_ERROR = 'FETCH_POST_ERROR'\nexport const QUERY_POKEMONS = 'QUERY_POKEMONS'\nexport const CANCEL_QUERY = 'CANCEL_QUERY'\nexport const INCREASE_ID = 'INCREASE_ID'\n\n//fetch the pokemons\nexport const fetchPokemons = (id) => (dispatch) => {\n        //object to store our new fetchec pokemon\n        let pokemonReady = {}\n        //fetching the api for the info\n        fetch(`https://pokeapi.co/api/v2/pokemon/${id}`)\n        .then( rawList => rawList.json())\n        .then(pokemon => {\n            pokemonReady = pokemon\n            //in the first fetch we're still missing data, so we do a second fetch to another url\n            fetch(pokemon.species.url)\n            .then(res => res.json())\n            .then(aditionalData => {\n                //description\n                let en_text = aditionalData.flavor_text_entries.find(item => item.language.name === 'en').flavor_text\n                pokemonReady.description = en_text\n                //gender formula according to de api docs\n                if(aditionalData.gender_rate === -1) pokemonReady.gender = 'Genderless'\n                else if (aditionalData.gender_rate >= 4) pokemonReady.gender = 'Female'\n                else pokemonReady.gender = 'Male'\n                //send it to the reducer\n                dispatch({\n                    type: FETCH_POSTS_SUCCESS,\n                    payload: {\n                        pokemon: pokemonReady\n                    }\n                })\n            })\n        })\n        //errors?\n        .catch(error =>{\n            dispatch({\n                type: FETCH_POSTS_ERROR,\n                error: error\n            })\n        })\n}\n//increase +20 the pokemons id, thats a next page in the api\nexport const increasePokemonId = () => {\n    return {\n        type: INCREASE_ID\n    }\n} \n\n//search pokemons in the already loaded ones\nexport const queryPokemons = (query) => {\n    return {\n        type: QUERY_POKEMONS,\n        payload: {\n            query\n        }\n    }\n}\n\n//go back to the old state (loaded pokemons)\nexport const cancelQuery = () => {\n    return {\n        type: CANCEL_QUERY\n    }\n}","import React, {useState} from 'react'\nimport './styles.css'\nimport {connect} from 'react-redux'\nimport {queryPokemons, cancelQuery} from '../../redux/actions/fetchActions'\n\nconst UseNavBar = (props) => {\n    //input ref\n    let inputRef = React.createRef()\n\n    //variable to show or hide the cancel button\n    const [cancelButtonClass, setCancelButtonClass] = useState('query-button hidden')\n\n    //Search in the already fetched pokemons list\n    const handleSearchBar = (e) => {\n        //if we have nothing to search, go back to the pokemon list before query\n        if(e.target.value === '') {\n            //hide the cancel button\n            setCancelButtonClass('query-button hidden')\n            //cancel query\n            props.cancelQuery();\n            return\n        }\n        //show cancel button\n        setCancelButtonClass('query-button')\n        //query\n        props.query(e.target.value)\n    }\n\n    //Go back to the pokemon list before query\n    const cleanQuery = () => {\n        //clear input\n        inputRef.current.value = ''\n        //hide cancel button\n        setCancelButtonClass('query-button hidden')\n        //cancel query\n        props.cancelQuery();\n    }\n\n\n    return(\n        <div className='navbar-custom'>\n            <div className='titles'>\n                <h5 className='main'>PokéApp</h5>\n                <p className='description'>Pokemons</p>\n                <span className='items-section'>Items</span>\n\n            </div>\n            <div className='query-container'>\n                <input type='text' placeholder='Search' ref={inputRef} className='query-bar' onChange={handleSearchBar}/>\n                <button onClick={cleanQuery} className={cancelButtonClass}>X</button>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return state\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        query: (query) => dispatch(queryPokemons(query)),\n        cancelQuery: () => dispatch(cancelQuery()),\n\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UseNavBar)","import React from 'react'\nimport './styles.css'\nimport {connect} from 'react-redux'\nimport {openModal} from '../../redux/actions/modalActions'\n\n\nconst Pokemon = (props) => {\n    const checkPokemonData = ()=> {\n        props.openModal(props.data)\n    }\n\n    return (\n        <div className='card' onClick={checkPokemonData}>\n            <img src={props.data.sprites.front_default} alt='imagen pokemon' className='card-img'></img>\n            <div className='card-name--container'>\n                <p className='card-name'>{props.data.name}</p>\n            </div>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return state\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        openModal: (pokemonData) => dispatch(openModal(pokemonData))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Pokemon)","export const OPEN_MODAL = 'OPEN_MODAL'\nexport const CLOSE_MODAL = 'CLOSE_MODAL'\nexport const COMPARE = 'COMPARE'\n\nexport const openModal = (pokemonData) => {\n    return {\n        type: OPEN_MODAL,\n        payload: {\n            pokemonData,\n            comparedPokemon: pokemonData\n        }\n    }\n}\n\nexport const closeModal = () => {\n    return {\n        type: CLOSE_MODAL\n    }\n}\n\nexport const compare = () => {\n    return {\n        type: COMPARE\n    }\n}","import React from 'react'\nimport Pokemon from '../pokemon/Pokemon'\nimport {connect} from 'react-redux'\nimport {fetchPokemons, increasePokemonId} from '../../redux/actions/fetchActions'\nimport Col from 'react-bootstrap/col'\nimport { Row, Container } from 'react-bootstrap'\nimport InfiniteScroll from 'react-infinite-scroller';\nimport './styles.css'\n\n//Pokemons lists\nconst PokemonList = (props) => {\n    \n    //pokemons index, we go 20 at the time\n    let id = props.pokemons.index\n    let limitIndex = id + 20\n\n    //load more pokemons as we scroll down\n    const loadMorePokemons = () => {\n        for(let i = id; i <limitIndex; i++){\n            props.fetch(i)\n        }\n        props.nextPage()\n    }\n\n    //showing the comparing card alert if we are comparing\n    let cardAlertDisplay = props.modalController.isComparing ? '' : 'hidden';\n\n    return (\n        <div>\n            {/* Check if we are comparing to render */}\n            {props.modalController.isComparing && (\n                <div className={`card-alert-container ${cardAlertDisplay}`}>\n                    <div className='card'>\n                        <div className=\"card-header--alert\">\n                            <span>Comparing pokemon</span>\n                        </div>\n                        <div className='card-body--alert'>\n                            <strong><span>{props.modalController.pokemonData.name}</span></strong>\n                        </div>\n                    </div>\n                </div>\n            )}\n            <Container className='pokemons-container'>\n                    {/* POKEMONS IF IN A QUERY */}\n                    {props.pokemons.queryPokemons !== null\n                    ? (<Row>\n                            {props.pokemons.queryPokemons.map(pokemon => (\n                            <Col xs={6} sm={3} md={3} lg={3} key={pokemon.id}>\n                                <Pokemon data={pokemon}/>\n                            </Col>\n                            ))}\n                        </Row>)\n                    /* POKEMONS IF NOT IN A QUERY */\n                    /* infinite scroll to keep searching */\n                    : (<InfiniteScroll loadMore={loadMorePokemons} hasMore={true || false} loader={<div className=\"loader\" key={0}>Loading ...</div>}\n                        initialLoad={false}\n                        threshold={20}>\n                            <Row>\n                                {props.pokemons.pokemons.map(pokemon => (\n                                    <Col xs={6} sm={3} md={3} lg={2} key={pokemon.id}>\n                                        <Pokemon data={pokemon}/>\n                                    </Col>\n                                ))}\n                            </Row>\n                        </InfiniteScroll>)\n                    }\n            </Container>\n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return state\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        fetch: (id) => dispatch(fetchPokemons(id)),\n        nextPage: () => dispatch(increasePokemonId())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PokemonList)","import {OPEN_MODAL, CLOSE_MODAL, COMPARE} from '../actions/modalActions'\n\nconst initialState = {\n    modalVisible: false,\n    pokemonData: null,\n    isComparing: false,\n    comparedPokemon: null\n}\n/* OPEN AND CLOSE THE MODAL, SENDING POKEMON DATA DEPENDING OF WHICH ONE WAS SELECTED */\nfunction modalController(state = initialState, actions) {\n    switch (actions.type) {\n        case OPEN_MODAL:\n            return {\n                ...state,\n                modalVisible: true,\n                pokemonData: state.isComparing? state.pokemonData: actions.payload.pokemonData,\n                comparedPokemon: state.isComparing? actions.payload.comparedPokemon : null\n            }\n        case CLOSE_MODAL:\n            return {\n                ...state,\n                modalVisible: false,\n                pokemonData: null,\n                comparedPokemon: null,\n                isComparing: false\n            }\n        case COMPARE:\n            return {\n                ...state,\n                modalVisible: false,\n                isComparing: true\n            }\n        default:\n            return state;\n    }\n}\n\nexport default modalController","import {FETCH_POSTS_SUCCESS, FETCH_POSTS_ERROR, QUERY_POKEMONS, CANCEL_QUERY, INCREASE_ID} from '../actions/fetchActions'\n\nconst initialState = {\n    pokemons: [],\n    queryPokemons: null,\n    isFetching: false,\n    error: null,\n    index: 1\n}\n\n/* FETCH POKEMONS TO THE API */\nconst pokemons = (state=initialState, actions)=> {\n    switch (actions.type) {\n        case FETCH_POSTS_SUCCESS:\n            \n            return {\n                ...state,\n                pokemons: [...state.pokemons, actions.payload.pokemon],\n                isFetching: false,\n            }\n        case INCREASE_ID:\n            \n            return {\n                 ...state,\n                index: state.index + 20\n                    \n            }\n        case QUERY_POKEMONS:\n            \n            return {\n                ...state,\n                queryPokemons: [...state.pokemons\n                        .filter(pokemon => pokemon.name.includes(actions.payload.query))]\n            }\n        case CANCEL_QUERY:\n            \n            return {\n                ...state,\n                pokemons: [...state.pokemons],\n                queryPokemons: null\n            }\n        case FETCH_POSTS_ERROR:\n            \n            return {\n                ...state,\n                error: actions.error\n            }\n        default:\n            return state\n    }\n}\n\nexport default pokemons","import {combineReducers} from 'redux'\nimport modalController from './modalReducer'\nimport pokemons from './pokemonsReducer'\n\n/* MIXING THE REDUCERS INTO ONE */\nexport default combineReducers({\n    modalController,\n    pokemons\n})","import {createStore, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducer from './reducers'\n\n/* CREATING THE REDUX STORE TO BE USED BY THE COMPONENTS */\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport default store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {connect} from 'react-redux'\nimport { closeModal, compare } from '../../redux/actions/modalActions';\nimport Col from 'react-bootstrap/col'\nimport { Row } from 'react-bootstrap'\nimport { XAxis, YAxis, BarChart, Bar } from 'recharts';\n\n\nimport './style.css'\n\n/* GRAFICAS INDIVIDUALES */\nconst Graph = ({data}) => {\n    //sacamos los stats del pokemon actual\n    const stats = data.pokemonData.stats.map(stat => stat.base_stat);\n    //sacamos los stats del pokemon comparado, si hay uno.\n    const comparedStats = data.comparedPokemon? data.comparedPokemon.stats.map(stat => stat.base_stat): null;\n    //dataset para mostrar, cambia dependiendo si estamos o no comparando\n    let dataSet;\n    if(comparedStats !== null)\n    {\n        dataSet = [{name: 'hp', pokemonData: stats[0], comparedPokemon: comparedStats[0]}, {name: 'attack', pokemonData: stats[1], comparedPokemon: comparedStats[1]},\n                     {name: '', pokemonData: stats[2], comparedPokemon: comparedStats[2]}, {name: 'special', pokemonData: stats[3], comparedPokemon: comparedStats[3]}, \n                     {name: '', pokemonData: stats[4], comparedPokemon: comparedStats[4]}, {name: 'speed', pokemonData: stats[5], comparedPokemon: comparedStats[5]}];\n    }\n    else\n    {\n        dataSet = [{name: 'hp', pokemonData: stats[0]}, {name: 'attack', pokemonData: stats[1]},\n        {name: '', pokemonData: stats[2]}, {name: 'special', pokemonData: stats[3]}, \n        {name: '', pokemonData: stats[4]}, {name: 'speed', pokemonData: stats[5]}];\n    }\n    //mostramos la grafica\n    return(\n    <BarChart width={350} height={200} data={dataSet} margin={{ top: 0, right: 25, bottom: 0, left: 0 }} className='stats-chart'>\n      <Bar dataKey=\"pokemonData\" barSize={35} fill=\"#096700\" />\n      {/* Si estamos comparando mostramos la segunda barra */}\n      {comparedStats !== null && (\n          <Bar dataKey=\"comparedPokemon\" barSize={35} fill=\"#12d400\" />\n      )}\n      <XAxis dataKey=\"name\" />\n      <YAxis/>\n    </BarChart>\n    )\n};\n\n const ModalHeaderPokemon = ({props}) => {\n\n    const data = props.modalController;\n\n     //Closing the modal\n     const handleCloseModal = () => {\n        props.closeModal()\n    }\n\n    //Closing the modal and setting a compare variable in the store\n    const handleCompare = () => {\n        props.comparePokemons()\n    }\n\n    return (\n    <div className='header'>\n        <div className='header--texts'>\n            <h6 className='header-texts--name'>{data.pokemonData.name}</h6>\n            <button onClick={handleCompare} className='header-texts--compare'>Compare To...</button>\n        </div>\n        <button onClick={handleCloseModal} className='header--close'>X</button>\n    </div>\n    )\n}\n\nconst ModalHeaderComparing = ({props}) => {\n    const data = props.modalController;\n\n     //Closing the modal\n     const handleCloseModal = () => {\n        props.closeModal()\n    }\n\n    return (\n    <div className='header'>\n        <div className='header--texts'>\n            <h6 className='header-texts--name'>{data.pokemonData.name} VS.</h6>\n            <h6 className='header-texts--name'>{data.comparedPokemon.name}</h6>\n        </div>\n        <button onClick={handleCloseModal} className='header--close'>X</button>\n    </div>\n    )\n}\n\nconst ModalBodyPokemon = ({data}) => (\n    <Row>\n    <Col xs={4}>\n        <img className='body-img' src={data.pokemonData.sprites.front_default} alt={data.pokemonData.name}></img>\n    </Col>\n    <Col xs={8} className='body-text-container'>\n        <div>\n            <Row>\n                <p className='body-description'>{data.pokemonData.description}</p>\n            </Row>\n            <hr/>\n            <Row>\n                <Col className='body-text-container--item'>\n                    <p className='body-title'>Height</p>\n                    <p>{`${data.pokemonData.height}m`}</p>\n                </Col>\n                <Col className='body-text-container--item'>\n                    <p className='body-title'>Weight</p>\n                    <p>{`${data.pokemonData.weight}kg`}</p>\n                </Col>\n                <Col className='body-text-container--item'>\n                    <p className='body-title'>Gender</p>\n                    <p>{data.pokemonData.gender}</p>\n                </Col>\n            </Row>\n            <Row className='body-list-items'>\n                <Col className='body-text-container--item'>\n                    <p className='body-title'>Abilities</p>\n                    <ul>\n                        {data.pokemonData.abilities.map( ability => (\n                            <li key={ability.ability.name}>\n                                {ability.ability.name}\n                            </li>\n                        ))}\n                    </ul>\n                </Col>\n                <Col className='body-text-container--item'>\n                    <p className='body-title'>Types</p>\n                    <ul>\n                        {data.pokemonData.types.map( type => (\n                            <li key={type.type.name}>\n                                {type.type.name}\n                            </li>\n                        ))}\n                    </ul>\n                </Col>\n            </Row>\n        </div>\n    </Col>\n</Row>\n)\n\nconst ModalBodyComparing = ({data}) => (\n<div>\n    <Row>\n        <div className='body-comparing--img'>\n            <Col xs={6}>\n                <img src={data.pokemonData.sprites.front_default} alt={data.pokemonData.name}></img>\n            </Col>\n            <Col xs={6}>\n                <img src={data.comparedPokemon.sprites.front_default} alt={data.comparedPokemon.name}></img>\n            </Col>\n        </div>\n    </Row>\n    <Row>\n\n    <Col xs={12}>\n        <div className='body-comparing-texts--container'>\n            {/* HEIGHT */}\n            <hr/>\n            <div className='body-comparing--description'>\n                <Col xs={4}>\n                    <p>{`${data.pokemonData.height}m`}</p>\n                </Col>\n                <Col xs={4}>\n                    <p className='body-title'>Height</p>\n                </Col>\n                <Col xs={4}>\n                    <p>{`${data.comparedPokemon.height}m`}</p>\n                </Col>\n            </div>\n            {/* WEIGHT */}\n            <div className='body-comparing--description'>\n                <Col xs={4}>\n                    <p>{`${data.pokemonData.weight}kg`}</p>\n                </Col>\n                <Col xs={4}>\n                    <p className='body-title'>Weight</p>\n                </Col>\n                <Col xs={4}>\n                    <p>{`${data.comparedPokemon.weight}kg`}</p>\n                </Col>\n            </div>\n            {/* GENDER */}\n            <div className='body-comparing--description'>\n                <Col xs={4}>\n                    <p>Male</p>\n                </Col>\n                <Col xs={4}>\n                    <p className='body-title'>Gender</p>\n                </Col>\n                <Col xs={4}>\n                    <p>Female</p>\n                </Col>\n            </div>\n            {/* ABILITIES */}\n            <div className='body-comparing--description'>\n                <Col xs={4} className='body-comparing-list'>\n                    <ul>\n                        {data.pokemonData.abilities.map( ability => (\n                            <li key={ability.ability.name}>\n                                {ability.ability.name}\n                            </li>\n                        ))}\n                    </ul>\n                </Col>\n                <Col xs={4}>\n                    <p className='body-title'>Abilities</p>\n                </Col>\n                <Col xs={4}>\n                    <ul className='body-comparing-list'>\n                        {data.comparedPokemon.abilities.map( ability => (\n                            <li key={ability.ability.name}>\n                                {ability.ability.name}\n                            </li>\n                        ))}\n                    </ul>\n                </Col>\n            </div>\n        </div>\n    </Col>\n    </Row>\n</div>\n)\n\nconst ModalPokemonFooter = ({data}) => (\n    <div>\n        <Row className='row-footer'>\n            <h4 className='footer-title'>Stats</h4>\n        </Row>\n        <Row className='row-footer'>\n            <Graph data={data}/>\n        </Row>\n    </div>\n)\n\n\n\nconst PokemonModal = (props) => {\n\n   \n    if(!props.modalController.modalVisible) return null;\n    else return (\n        ReactDOM.createPortal((\n            <div className='root-modal'>\n            {/* HEADER */}\n                <div>\n                    {!props.modalController.isComparing\n                     ?(<ModalHeaderPokemon props={props}/>)\n                     :(<ModalHeaderComparing  props={props}/>)\n                    }\n                </div>\n                <hr/>\n                {/* END HEADER */}\n\n                {/* BODY */}\n                <Row>\n                <div className='body'>\n                    {!props.modalController.isComparing\n                    ?(<ModalBodyPokemon data={props.modalController}/>)\n                    :(<ModalBodyComparing data={props.modalController}/>)\n                    }\n                    \n                    <hr/>\n                </div>\n                </Row>\n                {/* END BODY */}\n\n                {/* FOOTER */}\n                <Row>\n                <div className='footer'>\n                    <ModalPokemonFooter data={props.modalController}/>\n                </div>\n                </Row>\n                {/* END FOOTER */}\n            </div>\n        ), document.getElementById('modal-root'))\n    )\n}\n\n\nconst mapStateToProps = (state) => {\n    return state\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        closeModal: (pokemonData) => dispatch(closeModal(pokemonData)),\n        comparePokemons: () => dispatch(compare())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PokemonModal)\n","import React, {useEffect, useState} from 'react'\nimport './styles.css'\nimport {connect} from 'react-redux'\n\nconst UseOverlay = (props) => {\n    const [overlayState, setOverlayState] = useState('hidden')\n\n    useEffect( ()=> {\n\n        if(props.modalController.modalVisible) setOverlayState('open')\n        else setOverlayState('hidden')\n\n        return (()=>{})\n    }, [props.modalController.modalVisible])\n\n    return(\n        <div className={`overlay ${overlayState}`}>\n          \n        </div>\n    )\n}\n\nconst mapStateToProps = (state) => {\n    return state\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UseOverlay)","import React from 'react';\nimport './App.css';\nimport Banner from './components/banner';\nimport NavBar from './components/navBar';\nimport PokemonList from './components/pokemons-list';\nimport store from './redux/store'\nimport {Provider} from 'react-redux'\nimport PokemonModal from './components/pokemon-modal/PokemonModal';\nimport UseOverlay from './components/overlay';\n\n\n/* MAIN APP */\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n       <UseOverlay/>\n        <Banner/>\n        <NavBar/>\n        <PokemonModal/>\n        <PokemonList/>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"banner\":\"banner_banner__-R6DW\",\"title\":\"banner_title__3brMb\"};"],"sourceRoot":""}